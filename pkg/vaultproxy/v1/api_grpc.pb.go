// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SecretClient is the client API for Secret service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretClient interface {
	CreateGit(ctx context.Context, in *GitRequest, opts ...grpc.CallOption) (*CreateGitReply, error)
	DeleteGit(ctx context.Context, in *GitRequest, opts ...grpc.CallOption) (*DeleteGitReply, error)
	CreatePki(ctx context.Context, in *PkiRequest, opts ...grpc.CallOption) (*CreatePkiReply, error)
	DeletePki(ctx context.Context, in *PkiRequest, opts ...grpc.CallOption) (*DeletePkiReply, error)
	CreateRepo(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*CreateRepoReply, error)
	DeleteRepo(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*DeleteRepoReply, error)
	CreteTenantGit(ctx context.Context, in *TenantGitRequest, opts ...grpc.CallOption) (*CreateTenantGitReply, error)
	DeleteTenantGit(ctx context.Context, in *TenantGitRequest, opts ...grpc.CallOption) (*DeleteTenantGitReply, error)
	//////////////////////////////////////////////////////////////////
	CreateTenantRepo(ctx context.Context, in *TenantRepoRequest, opts ...grpc.CallOption) (*CreateTenantRepoReply, error)
	DeleteTenantRepo(ctx context.Context, in *TenantRepoRequest, opts ...grpc.CallOption) (*DeleteTenantRepoReply, error)
	CreateCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*CreateClusterReply, error)
	DeleteCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*DeleteClusterReply, error)
}

type secretClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretClient(cc grpc.ClientConnInterface) SecretClient {
	return &secretClient{cc}
}

func (c *secretClient) CreateGit(ctx context.Context, in *GitRequest, opts ...grpc.CallOption) (*CreateGitReply, error) {
	out := new(CreateGitReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/CreateGit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) DeleteGit(ctx context.Context, in *GitRequest, opts ...grpc.CallOption) (*DeleteGitReply, error) {
	out := new(DeleteGitReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/DeleteGit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) CreatePki(ctx context.Context, in *PkiRequest, opts ...grpc.CallOption) (*CreatePkiReply, error) {
	out := new(CreatePkiReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/CreatePki", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) DeletePki(ctx context.Context, in *PkiRequest, opts ...grpc.CallOption) (*DeletePkiReply, error) {
	out := new(DeletePkiReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/DeletePki", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) CreateRepo(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*CreateRepoReply, error) {
	out := new(CreateRepoReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/CreateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) DeleteRepo(ctx context.Context, in *RepoRequest, opts ...grpc.CallOption) (*DeleteRepoReply, error) {
	out := new(DeleteRepoReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/DeleteRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) CreteTenantGit(ctx context.Context, in *TenantGitRequest, opts ...grpc.CallOption) (*CreateTenantGitReply, error) {
	out := new(CreateTenantGitReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/CreteTenantGit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) DeleteTenantGit(ctx context.Context, in *TenantGitRequest, opts ...grpc.CallOption) (*DeleteTenantGitReply, error) {
	out := new(DeleteTenantGitReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/DeleteTenantGit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) CreateTenantRepo(ctx context.Context, in *TenantRepoRequest, opts ...grpc.CallOption) (*CreateTenantRepoReply, error) {
	out := new(CreateTenantRepoReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/CreateTenantRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) DeleteTenantRepo(ctx context.Context, in *TenantRepoRequest, opts ...grpc.CallOption) (*DeleteTenantRepoReply, error) {
	out := new(DeleteTenantRepoReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/DeleteTenantRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) CreateCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*CreateClusterReply, error) {
	out := new(CreateClusterReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/CreateCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretClient) DeleteCluster(ctx context.Context, in *ClusterRequest, opts ...grpc.CallOption) (*DeleteClusterReply, error) {
	out := new(DeleteClusterReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Secret/DeleteCluster", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretServer is the server API for Secret service.
// All implementations must embed UnimplementedSecretServer
// for forward compatibility
type SecretServer interface {
	CreateGit(context.Context, *GitRequest) (*CreateGitReply, error)
	DeleteGit(context.Context, *GitRequest) (*DeleteGitReply, error)
	CreatePki(context.Context, *PkiRequest) (*CreatePkiReply, error)
	DeletePki(context.Context, *PkiRequest) (*DeletePkiReply, error)
	CreateRepo(context.Context, *RepoRequest) (*CreateRepoReply, error)
	DeleteRepo(context.Context, *RepoRequest) (*DeleteRepoReply, error)
	CreteTenantGit(context.Context, *TenantGitRequest) (*CreateTenantGitReply, error)
	DeleteTenantGit(context.Context, *TenantGitRequest) (*DeleteTenantGitReply, error)
	//////////////////////////////////////////////////////////////////
	CreateTenantRepo(context.Context, *TenantRepoRequest) (*CreateTenantRepoReply, error)
	DeleteTenantRepo(context.Context, *TenantRepoRequest) (*DeleteTenantRepoReply, error)
	CreateCluster(context.Context, *ClusterRequest) (*CreateClusterReply, error)
	DeleteCluster(context.Context, *ClusterRequest) (*DeleteClusterReply, error)
	mustEmbedUnimplementedSecretServer()
}

// UnimplementedSecretServer must be embedded to have forward compatible implementations.
type UnimplementedSecretServer struct {
}

func (UnimplementedSecretServer) CreateGit(context.Context, *GitRequest) (*CreateGitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGit not implemented")
}
func (UnimplementedSecretServer) DeleteGit(context.Context, *GitRequest) (*DeleteGitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGit not implemented")
}
func (UnimplementedSecretServer) CreatePki(context.Context, *PkiRequest) (*CreatePkiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePki not implemented")
}
func (UnimplementedSecretServer) DeletePki(context.Context, *PkiRequest) (*DeletePkiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePki not implemented")
}
func (UnimplementedSecretServer) CreateRepo(context.Context, *RepoRequest) (*CreateRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedSecretServer) DeleteRepo(context.Context, *RepoRequest) (*DeleteRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepo not implemented")
}
func (UnimplementedSecretServer) CreteTenantGit(context.Context, *TenantGitRequest) (*CreateTenantGitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreteTenantGit not implemented")
}
func (UnimplementedSecretServer) DeleteTenantGit(context.Context, *TenantGitRequest) (*DeleteTenantGitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenantGit not implemented")
}
func (UnimplementedSecretServer) CreateTenantRepo(context.Context, *TenantRepoRequest) (*CreateTenantRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTenantRepo not implemented")
}
func (UnimplementedSecretServer) DeleteTenantRepo(context.Context, *TenantRepoRequest) (*DeleteTenantRepoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTenantRepo not implemented")
}
func (UnimplementedSecretServer) CreateCluster(context.Context, *ClusterRequest) (*CreateClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedSecretServer) DeleteCluster(context.Context, *ClusterRequest) (*DeleteClusterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedSecretServer) mustEmbedUnimplementedSecretServer() {}

// UnsafeSecretServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretServer will
// result in compilation errors.
type UnsafeSecretServer interface {
	mustEmbedUnimplementedSecretServer()
}

func RegisterSecretServer(s grpc.ServiceRegistrar, srv SecretServer) {
	s.RegisterService(&Secret_ServiceDesc, srv)
}

func _Secret_CreateGit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).CreateGit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/CreateGit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).CreateGit(ctx, req.(*GitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_DeleteGit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).DeleteGit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/DeleteGit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).DeleteGit(ctx, req.(*GitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_CreatePki_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).CreatePki(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/CreatePki",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).CreatePki(ctx, req.(*PkiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_DeletePki_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PkiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).DeletePki(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/DeletePki",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).DeletePki(ctx, req.(*PkiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).CreateRepo(ctx, req.(*RepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/DeleteRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).DeleteRepo(ctx, req.(*RepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_CreteTenantGit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantGitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).CreteTenantGit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/CreteTenantGit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).CreteTenantGit(ctx, req.(*TenantGitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_DeleteTenantGit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantGitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).DeleteTenantGit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/DeleteTenantGit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).DeleteTenantGit(ctx, req.(*TenantGitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_CreateTenantRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).CreateTenantRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/CreateTenantRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).CreateTenantRepo(ctx, req.(*TenantRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_DeleteTenantRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TenantRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).DeleteTenantRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/DeleteTenantRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).DeleteTenantRepo(ctx, req.(*TenantRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/CreateCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).CreateCluster(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secret_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Secret/DeleteCluster",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretServer).DeleteCluster(ctx, req.(*ClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Secret_ServiceDesc is the grpc.ServiceDesc for Secret service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Secret_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.vaultproxy.v1.Secret",
	HandlerType: (*SecretServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGit",
			Handler:    _Secret_CreateGit_Handler,
		},
		{
			MethodName: "DeleteGit",
			Handler:    _Secret_DeleteGit_Handler,
		},
		{
			MethodName: "CreatePki",
			Handler:    _Secret_CreatePki_Handler,
		},
		{
			MethodName: "DeletePki",
			Handler:    _Secret_DeletePki_Handler,
		},
		{
			MethodName: "CreateRepo",
			Handler:    _Secret_CreateRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _Secret_DeleteRepo_Handler,
		},
		{
			MethodName: "CreteTenantGit",
			Handler:    _Secret_CreteTenantGit_Handler,
		},
		{
			MethodName: "DeleteTenantGit",
			Handler:    _Secret_DeleteTenantGit_Handler,
		},
		{
			MethodName: "CreateTenantRepo",
			Handler:    _Secret_CreateTenantRepo_Handler,
		},
		{
			MethodName: "DeleteTenantRepo",
			Handler:    _Secret_DeleteTenantRepo_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _Secret_CreateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _Secret_DeleteCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	CreateAuth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*CreateAuthReply, error)
	DeleteAuth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*DeleteAuthReply, error)
	CreateAuthrole(ctx context.Context, in *AuthroleRequest, opts ...grpc.CallOption) (*CreateAuthroleReply, error)
	DeleteAuthrole(ctx context.Context, in *AuthroleRequest, opts ...grpc.CallOption) (*DeleteAuthroleReply, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) CreateAuth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*CreateAuthReply, error) {
	out := new(CreateAuthReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Auth/CreateAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteAuth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*DeleteAuthReply, error) {
	out := new(DeleteAuthReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Auth/DeleteAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateAuthrole(ctx context.Context, in *AuthroleRequest, opts ...grpc.CallOption) (*CreateAuthroleReply, error) {
	out := new(CreateAuthroleReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Auth/CreateAuthrole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteAuthrole(ctx context.Context, in *AuthroleRequest, opts ...grpc.CallOption) (*DeleteAuthroleReply, error) {
	out := new(DeleteAuthroleReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.Auth/DeleteAuthrole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	CreateAuth(context.Context, *AuthRequest) (*CreateAuthReply, error)
	DeleteAuth(context.Context, *AuthRequest) (*DeleteAuthReply, error)
	CreateAuthrole(context.Context, *AuthroleRequest) (*CreateAuthroleReply, error)
	DeleteAuthrole(context.Context, *AuthroleRequest) (*DeleteAuthroleReply, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) CreateAuth(context.Context, *AuthRequest) (*CreateAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuth not implemented")
}
func (UnimplementedAuthServer) DeleteAuth(context.Context, *AuthRequest) (*DeleteAuthReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuth not implemented")
}
func (UnimplementedAuthServer) CreateAuthrole(context.Context, *AuthroleRequest) (*CreateAuthroleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAuthrole not implemented")
}
func (UnimplementedAuthServer) DeleteAuthrole(context.Context, *AuthroleRequest) (*DeleteAuthroleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAuthrole not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_CreateAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Auth/CreateAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateAuth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Auth/DeleteAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteAuth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateAuthrole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateAuthrole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Auth/CreateAuthrole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateAuthrole(ctx, req.(*AuthroleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteAuthrole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteAuthrole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.Auth/DeleteAuthrole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteAuthrole(ctx, req.(*AuthroleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.vaultproxy.v1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateAuth",
			Handler:    _Auth_CreateAuth_Handler,
		},
		{
			MethodName: "DeleteAuth",
			Handler:    _Auth_DeleteAuth_Handler,
		},
		{
			MethodName: "CreateAuthrole",
			Handler:    _Auth_CreateAuthrole_Handler,
		},
		{
			MethodName: "DeleteAuthrole",
			Handler:    _Auth_DeleteAuthrole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// AuthGrantClient is the client API for AuthGrant service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthGrantClient interface {
	GrantAuthroleGitPolicy(ctx context.Context, in *AuthroleGitPolicyRequest, opts ...grpc.CallOption) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleGitPolicy(ctx context.Context, in *AuthroleGitPolicyRequest, opts ...grpc.CallOption) (*RevokeAuthrolePolicyReply, error)
	GrantAuthroleRepoPolicy(ctx context.Context, in *AuthroleRepoPolicyRequest, opts ...grpc.CallOption) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleRepoPolicy(ctx context.Context, in *AuthroleRepoPolicyRequest, opts ...grpc.CallOption) (*RevokeAuthrolePolicyReply, error)
	GrantAuthroleClusterPolicy(ctx context.Context, in *AuthroleClusterPolicyRequest, opts ...grpc.CallOption) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleClusterPolicy(ctx context.Context, in *AuthroleClusterPolicyRequest, opts ...grpc.CallOption) (*RevokeAuthrolePolicyReply, error)
	GrantAuthroleTenantGitPolicy(ctx context.Context, in *AuthroleTenantGitPolicyRequest, opts ...grpc.CallOption) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleTenantGitPolicy(ctx context.Context, in *AuthroleTenantGitPolicyRequest, opts ...grpc.CallOption) (*RevokeAuthrolePolicyReply, error)
	GrantAuthroleTenantRepoPolicy(ctx context.Context, in *AuthroleTenantRepoPolicyRequest, opts ...grpc.CallOption) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleTenantRepoPolicy(ctx context.Context, in *AuthroleTenantRepoPolicyRequest, opts ...grpc.CallOption) (*RevokeAuthrolePolicyReply, error)
}

type authGrantClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthGrantClient(cc grpc.ClientConnInterface) AuthGrantClient {
	return &authGrantClient{cc}
}

func (c *authGrantClient) GrantAuthroleGitPolicy(ctx context.Context, in *AuthroleGitPolicyRequest, opts ...grpc.CallOption) (*GrantAuthrolePolicyReply, error) {
	out := new(GrantAuthrolePolicyReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.AuthGrant/GrantAuthroleGitPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrantClient) RevokeAuthroleGitPolicy(ctx context.Context, in *AuthroleGitPolicyRequest, opts ...grpc.CallOption) (*RevokeAuthrolePolicyReply, error) {
	out := new(RevokeAuthrolePolicyReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleGitPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrantClient) GrantAuthroleRepoPolicy(ctx context.Context, in *AuthroleRepoPolicyRequest, opts ...grpc.CallOption) (*GrantAuthrolePolicyReply, error) {
	out := new(GrantAuthrolePolicyReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.AuthGrant/GrantAuthroleRepoPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrantClient) RevokeAuthroleRepoPolicy(ctx context.Context, in *AuthroleRepoPolicyRequest, opts ...grpc.CallOption) (*RevokeAuthrolePolicyReply, error) {
	out := new(RevokeAuthrolePolicyReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleRepoPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrantClient) GrantAuthroleClusterPolicy(ctx context.Context, in *AuthroleClusterPolicyRequest, opts ...grpc.CallOption) (*GrantAuthrolePolicyReply, error) {
	out := new(GrantAuthrolePolicyReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.AuthGrant/GrantAuthroleClusterPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrantClient) RevokeAuthroleClusterPolicy(ctx context.Context, in *AuthroleClusterPolicyRequest, opts ...grpc.CallOption) (*RevokeAuthrolePolicyReply, error) {
	out := new(RevokeAuthrolePolicyReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleClusterPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrantClient) GrantAuthroleTenantGitPolicy(ctx context.Context, in *AuthroleTenantGitPolicyRequest, opts ...grpc.CallOption) (*GrantAuthrolePolicyReply, error) {
	out := new(GrantAuthrolePolicyReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.AuthGrant/GrantAuthroleTenantGitPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrantClient) RevokeAuthroleTenantGitPolicy(ctx context.Context, in *AuthroleTenantGitPolicyRequest, opts ...grpc.CallOption) (*RevokeAuthrolePolicyReply, error) {
	out := new(RevokeAuthrolePolicyReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleTenantGitPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrantClient) GrantAuthroleTenantRepoPolicy(ctx context.Context, in *AuthroleTenantRepoPolicyRequest, opts ...grpc.CallOption) (*GrantAuthrolePolicyReply, error) {
	out := new(GrantAuthrolePolicyReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.AuthGrant/GrantAuthroleTenantRepoPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authGrantClient) RevokeAuthroleTenantRepoPolicy(ctx context.Context, in *AuthroleTenantRepoPolicyRequest, opts ...grpc.CallOption) (*RevokeAuthrolePolicyReply, error) {
	out := new(RevokeAuthrolePolicyReply)
	err := c.cc.Invoke(ctx, "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleTenantRepoPolicy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthGrantServer is the server API for AuthGrant service.
// All implementations must embed UnimplementedAuthGrantServer
// for forward compatibility
type AuthGrantServer interface {
	GrantAuthroleGitPolicy(context.Context, *AuthroleGitPolicyRequest) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleGitPolicy(context.Context, *AuthroleGitPolicyRequest) (*RevokeAuthrolePolicyReply, error)
	GrantAuthroleRepoPolicy(context.Context, *AuthroleRepoPolicyRequest) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleRepoPolicy(context.Context, *AuthroleRepoPolicyRequest) (*RevokeAuthrolePolicyReply, error)
	GrantAuthroleClusterPolicy(context.Context, *AuthroleClusterPolicyRequest) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleClusterPolicy(context.Context, *AuthroleClusterPolicyRequest) (*RevokeAuthrolePolicyReply, error)
	GrantAuthroleTenantGitPolicy(context.Context, *AuthroleTenantGitPolicyRequest) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleTenantGitPolicy(context.Context, *AuthroleTenantGitPolicyRequest) (*RevokeAuthrolePolicyReply, error)
	GrantAuthroleTenantRepoPolicy(context.Context, *AuthroleTenantRepoPolicyRequest) (*GrantAuthrolePolicyReply, error)
	RevokeAuthroleTenantRepoPolicy(context.Context, *AuthroleTenantRepoPolicyRequest) (*RevokeAuthrolePolicyReply, error)
	mustEmbedUnimplementedAuthGrantServer()
}

// UnimplementedAuthGrantServer must be embedded to have forward compatible implementations.
type UnimplementedAuthGrantServer struct {
}

func (UnimplementedAuthGrantServer) GrantAuthroleGitPolicy(context.Context, *AuthroleGitPolicyRequest) (*GrantAuthrolePolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAuthroleGitPolicy not implemented")
}
func (UnimplementedAuthGrantServer) RevokeAuthroleGitPolicy(context.Context, *AuthroleGitPolicyRequest) (*RevokeAuthrolePolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAuthroleGitPolicy not implemented")
}
func (UnimplementedAuthGrantServer) GrantAuthroleRepoPolicy(context.Context, *AuthroleRepoPolicyRequest) (*GrantAuthrolePolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAuthroleRepoPolicy not implemented")
}
func (UnimplementedAuthGrantServer) RevokeAuthroleRepoPolicy(context.Context, *AuthroleRepoPolicyRequest) (*RevokeAuthrolePolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAuthroleRepoPolicy not implemented")
}
func (UnimplementedAuthGrantServer) GrantAuthroleClusterPolicy(context.Context, *AuthroleClusterPolicyRequest) (*GrantAuthrolePolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAuthroleClusterPolicy not implemented")
}
func (UnimplementedAuthGrantServer) RevokeAuthroleClusterPolicy(context.Context, *AuthroleClusterPolicyRequest) (*RevokeAuthrolePolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAuthroleClusterPolicy not implemented")
}
func (UnimplementedAuthGrantServer) GrantAuthroleTenantGitPolicy(context.Context, *AuthroleTenantGitPolicyRequest) (*GrantAuthrolePolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAuthroleTenantGitPolicy not implemented")
}
func (UnimplementedAuthGrantServer) RevokeAuthroleTenantGitPolicy(context.Context, *AuthroleTenantGitPolicyRequest) (*RevokeAuthrolePolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAuthroleTenantGitPolicy not implemented")
}
func (UnimplementedAuthGrantServer) GrantAuthroleTenantRepoPolicy(context.Context, *AuthroleTenantRepoPolicyRequest) (*GrantAuthrolePolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAuthroleTenantRepoPolicy not implemented")
}
func (UnimplementedAuthGrantServer) RevokeAuthroleTenantRepoPolicy(context.Context, *AuthroleTenantRepoPolicyRequest) (*RevokeAuthrolePolicyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeAuthroleTenantRepoPolicy not implemented")
}
func (UnimplementedAuthGrantServer) mustEmbedUnimplementedAuthGrantServer() {}

// UnsafeAuthGrantServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthGrantServer will
// result in compilation errors.
type UnsafeAuthGrantServer interface {
	mustEmbedUnimplementedAuthGrantServer()
}

func RegisterAuthGrantServer(s grpc.ServiceRegistrar, srv AuthGrantServer) {
	s.RegisterService(&AuthGrant_ServiceDesc, srv)
}

func _AuthGrant_GrantAuthroleGitPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleGitPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrantServer).GrantAuthroleGitPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.AuthGrant/GrantAuthroleGitPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrantServer).GrantAuthroleGitPolicy(ctx, req.(*AuthroleGitPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrant_RevokeAuthroleGitPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleGitPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrantServer).RevokeAuthroleGitPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleGitPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrantServer).RevokeAuthroleGitPolicy(ctx, req.(*AuthroleGitPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrant_GrantAuthroleRepoPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleRepoPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrantServer).GrantAuthroleRepoPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.AuthGrant/GrantAuthroleRepoPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrantServer).GrantAuthroleRepoPolicy(ctx, req.(*AuthroleRepoPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrant_RevokeAuthroleRepoPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleRepoPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrantServer).RevokeAuthroleRepoPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleRepoPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrantServer).RevokeAuthroleRepoPolicy(ctx, req.(*AuthroleRepoPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrant_GrantAuthroleClusterPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleClusterPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrantServer).GrantAuthroleClusterPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.AuthGrant/GrantAuthroleClusterPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrantServer).GrantAuthroleClusterPolicy(ctx, req.(*AuthroleClusterPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrant_RevokeAuthroleClusterPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleClusterPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrantServer).RevokeAuthroleClusterPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleClusterPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrantServer).RevokeAuthroleClusterPolicy(ctx, req.(*AuthroleClusterPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrant_GrantAuthroleTenantGitPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleTenantGitPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrantServer).GrantAuthroleTenantGitPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.AuthGrant/GrantAuthroleTenantGitPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrantServer).GrantAuthroleTenantGitPolicy(ctx, req.(*AuthroleTenantGitPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrant_RevokeAuthroleTenantGitPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleTenantGitPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrantServer).RevokeAuthroleTenantGitPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleTenantGitPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrantServer).RevokeAuthroleTenantGitPolicy(ctx, req.(*AuthroleTenantGitPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrant_GrantAuthroleTenantRepoPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleTenantRepoPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrantServer).GrantAuthroleTenantRepoPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.AuthGrant/GrantAuthroleTenantRepoPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrantServer).GrantAuthroleTenantRepoPolicy(ctx, req.(*AuthroleTenantRepoPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthGrant_RevokeAuthroleTenantRepoPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthroleTenantRepoPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthGrantServer).RevokeAuthroleTenantRepoPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.vaultproxy.v1.AuthGrant/RevokeAuthroleTenantRepoPolicy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthGrantServer).RevokeAuthroleTenantRepoPolicy(ctx, req.(*AuthroleTenantRepoPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthGrant_ServiceDesc is the grpc.ServiceDesc for AuthGrant service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthGrant_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.vaultproxy.v1.AuthGrant",
	HandlerType: (*AuthGrantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GrantAuthroleGitPolicy",
			Handler:    _AuthGrant_GrantAuthroleGitPolicy_Handler,
		},
		{
			MethodName: "RevokeAuthroleGitPolicy",
			Handler:    _AuthGrant_RevokeAuthroleGitPolicy_Handler,
		},
		{
			MethodName: "GrantAuthroleRepoPolicy",
			Handler:    _AuthGrant_GrantAuthroleRepoPolicy_Handler,
		},
		{
			MethodName: "RevokeAuthroleRepoPolicy",
			Handler:    _AuthGrant_RevokeAuthroleRepoPolicy_Handler,
		},
		{
			MethodName: "GrantAuthroleClusterPolicy",
			Handler:    _AuthGrant_GrantAuthroleClusterPolicy_Handler,
		},
		{
			MethodName: "RevokeAuthroleClusterPolicy",
			Handler:    _AuthGrant_RevokeAuthroleClusterPolicy_Handler,
		},
		{
			MethodName: "GrantAuthroleTenantGitPolicy",
			Handler:    _AuthGrant_GrantAuthroleTenantGitPolicy_Handler,
		},
		{
			MethodName: "RevokeAuthroleTenantGitPolicy",
			Handler:    _AuthGrant_RevokeAuthroleTenantGitPolicy_Handler,
		},
		{
			MethodName: "GrantAuthroleTenantRepoPolicy",
			Handler:    _AuthGrant_GrantAuthroleTenantRepoPolicy_Handler,
		},
		{
			MethodName: "RevokeAuthroleTenantRepoPolicy",
			Handler:    _AuthGrant_RevokeAuthroleTenantRepoPolicy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
